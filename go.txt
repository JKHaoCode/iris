mysql
一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：
1、导出数据和表结构：
mysqldump -u用户名 -p密码 数据库名 > 数据库名.sql
#/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql
敲回车后会提示输入密码

2、只导出表结构
mysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql
#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql

注：/usr/local/mysql/bin/  --->  mysql的data目录


二、导入数据库
1、首先建空数据库
mysql>create database abc;

2、导入数据库
方法一：
（1）选择数据库
mysql>use abc;
（2）设置数据库编码
mysql>set names utf8;
（3）导入数据（注意sql文件的路径）
mysql>source /home/abc/abc.sql;
方法二：
mysql -u用户名 -p密码 数据库名 < 数据库名.sql
#mysql -uabc_f -p abc < abc.sql

mysql S U I D

update
UPDATE table_name SET field1=new-value1, field2=new-value2
[WHERE Clause]

INSERT INTO table_name ( field1, field2,...fieldN )
                       VALUES
                       ( value1, value2,...valueN );

SELECT column_name,column_name
FROM table_name
[WHERE Clause]
[LIMIT N][ OFFSET M]


DELETE FROM table_name [WHERE Clause]

go modules常用命令

go mod init: 初始化modules
    go mod download: 下载依赖的module到本地cache
    go mod edit: 编辑go.mod文件，选项有-json、-require和-exclude，可以使用帮助go help mod edit
    go mod graph: 以文本模式打印模块需求图
    go mod tidy: 检查，删除错误或者不使用的modules，以及添加缺失的模块
    go mod vendor: 生成vendor目录，将依赖复制到vendor目录下面
    go mod verify: 验证依赖是否正确
    go mod why： 解释为什么需要依赖


    go list -m： 查看主模块的路径
    go list -m -f={{.Dir}}： 查看主模块的根目录
    go list -m all： 查看当前的依赖和版本信息


go 的内置函数

go 的内置函数不拥有前面提到的go的标准类型，因此内置函数不能作为一个函数值赋值给函数类型的变量。

close
close用于关闭一个channel，使用close函数要注意以下几点：

关闭一个只接受的channel会导致错误
在一个已经关闭的channel上发送数据会导致panic
关闭一个nil channel会导致panic
在一个channel关闭之后，如果channel已经没有剩余数据等待接受了，这时候如果继续接收，会返回一个channel对应数据类型的nil value，如果接收的时候使用多返回值，第二个参数表示一个channel是否已经关闭。
len和cap
len和cap都接收多种类型的参数，返回值是int类型，具体接收哪些类型的参数以及返回的值的含义见下表

方法	参数	结果
len(s)	string	字符串的字节长度
[n]T *[n]T	数组的长度（==n）
[]T	slice的长度
map[K][T]	map的长度，即有多少个key-value对
chan T	在channel里面有多少个等待接收的元素
cap(s)	[n]T *[n]T	数组长度（==n）
[]T	slice的capacity（预分配空间）
chan T	channel的buffer的长度
len，cap的返回值满足如下条件：
0<=len(s)<=cap(s)
slice,map,channel的nil值的len为0
slice,channel的nil值的cap为0

new
new函数的参数是一个类型，返回一个指向该类型的指针，并且进行0值初始化

call	type	result
make(T, n)	slice	创建一个T类型的slice且长度为n
make(T, n, m)	slice	创建一个T类型的slice且长度为n，capacity位m
make(T)	map	创建一个T类型的map
make(T, n)	map	创建一个T类型的map，且预分配n个空间
make(T)	channel	创一个channel
make(T, n)	channel	创建一个拥有n长度的buffer的channel
m>=n，且n和m必须是整型且不能为负数。

make
make也根据不同参数类型和参数个数具有不同的含义，见下表

append
append(s S, x …T) S
在slice后面追加元素，返回一个新的slice，新的slice可能指向不同的underlying array，所以调用append的时候一定要将其返回值赋值给slice，保证得到append之后的slice。
s = append(s, a)

copy
copy(dst, src, []T) int
copy(dst []byte, src string) int
copy返回拷贝的长度，会自动取最短的长度进行拷贝(min(len(src), len(dst)))

delete
删除一个map指定key的元素
delete(m, k)

panic,recover
panic(interface{})
直接调用panic或者是一个运行panic都会结束本次函数调用，函数中的defer将会被正常执行，panic如果不被recover将会导致程序崩溃
recover() interface{}
在defer的函数中调用recover，可以将调用defer的后面的函数体的panic恢复。

func protect(g func()) {
    defer func() {
        if x := recover(); x != nil {
            fmt.Println("run time panic:%v"x)
        }
    }()
    g()
}
1
2
3
4
5
6
7
8

fmt 包 打印
通用：

%v	值的默认格式表示
%+v	类似%v，但输出结构体时会添加字段名
%#v	值的Go语法表示
%T	值的类型的Go语法表示
%%	百分号
布尔值：

%t	单词true或false
整数：

%b	表示为二进制
%c	该值对应的unicode码值
%d	表示为十进制
%o	表示为八进制
%q	该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示
%x	表示为十六进制，使用a-f
%X	表示为十六进制，使用A-F
%U	表示为Unicode格式：U+1234，等价于"U+%04X"
浮点数与复数的两个组分：

%b	无小数部分、二进制指数的科学计数法，如-123456p-78；参见strconv.FormatFloat
%e	科学计数法，如-1234.456e+78
%E	科学计数法，如-1234.456E+78
%f	有小数部分但无指数部分，如123.456
%F	等价于%f
%g	根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）
%G	根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）
字符串和[]byte：

%s	直接输出字符串或者[]byte
%q	该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示
%x	每个字节用两字符十六进制数表示（使用a-f）
%X	每个字节用两字符十六进制数表示（使用A-F）
指针：

%p	表示为十六进制，并加上前导的0x
没有%u。整数如果是无符号类型自然输出也是无符号的。类似的，也没有必要指定操作数的尺寸（int8，int64）。

宽度通过一个紧跟在百分号后面的十进制数指定，如果未指定宽度，则表示值时除必需之外不作填充。精度通过（可选的）宽度后跟点号后跟的十进制数指定。如果未指定精度，会使用默认精度；如果点号后没有跟数字，表示精度为0。举例如下：

%f:    默认宽度，默认精度
%9f    宽度9，默认精度
%.2f   默认宽度，精度2
%9.2f  宽度9，精度2
%9.f   宽度9，精度0